"use strict";(self.webpackChunkmd_note=self.webpackChunkmd_note||[]).push([[7682],{2055:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>i});var r=n(5893),o=n(1151);const c={},s="Create the gRPC cliet in a .NET console app",l={id:"Dotnet/gRPC/gRPC_client_in_console_app",title:"Create the gRPC cliet in a .NET console app",description:"Create a console app",source:"@site/docs/Dotnet/gRPC/gRPC_client_in_console_app.md",sourceDirName:"Dotnet/gRPC",slug:"/Dotnet/gRPC/gRPC_client_in_console_app",permalink:"/my-notes/docs/Dotnet/gRPC/gRPC_client_in_console_app",draft:!1,unlisted:!1,editUrl:"https://github.com/jishen027/my-notes/tree/main/docs/Dotnet/gRPC/gRPC_client_in_console_app.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Task-based asynchronous programming",permalink:"/my-notes/docs/Dotnet/TaskBased_async_programming"},next:{title:"Express Passport JS",permalink:"/my-notes/docs/Express/Passport_JS"}},a={},i=[{value:"Create a console app",id:"create-a-console-app",level:2},{value:"Add gRPC packages to the project",id:"add-grpc-packages-to-the-project",level:2},{value:"Add <code>gree.proto</code>",id:"add-greeproto",level:2},{value:"Add <code>&lt;Protobuf&gt;</code> element to <code>&lt;ItemGroup&gt;</code> in the <code>.csproj</code> file.",id:"add-protobuf-element-to-itemgroup-in-the-csproj-file",level:2},{value:"Create the Greeter client",id:"create-the-greeter-client",level:2}];function d(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"create-the-grpc-cliet-in-a-net-console-app",children:"Create the gRPC cliet in a .NET console app"}),"\n",(0,r.jsx)(t.h2,{id:"create-a-console-app",children:"Create a console app"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"dotnet new console -o GrpcGreeterClient\n"})}),"\n",(0,r.jsx)(t.h2,{id:"add-grpc-packages-to-the-project",children:"Add gRPC packages to the project"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"dotnet add GrpcGreeterClient.csproj package Grpc.Net.Client\ndotnet add GrpcGreeterClient.csproj package Google.Protobuf\ndotnet add GrpcGreeterClient.csproj package Grpc.Tools\n"})}),"\n",(0,r.jsxs)(t.h2,{id:"add-greeproto",children:["Add ",(0,r.jsx)(t.code,{children:"gree.proto"})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Create a ",(0,r.jsx)(t.code,{children:"Proto"})," folder in the project."]}),"\n",(0,r.jsxs)(t.li,{children:["Copy the ",(0,r.jsx)(t.code,{children:"Greet.proto"})," file from gRPC server to here.(gRPC server and clinet use a same proto file)"]}),"\n",(0,r.jsx)(t.li,{children:"add namespace to the file"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-json",children:'option csharp_namespace = "GrpcGreeterClient"\n'})}),"\n",(0,r.jsxs)(t.h2,{id:"add-protobuf-element-to-itemgroup-in-the-csproj-file",children:["Add ",(0,r.jsx)(t.code,{children:"<Protobuf>"})," element to ",(0,r.jsx)(t.code,{children:"<ItemGroup>"})," in the ",(0,r.jsx)(t.code,{children:".csproj"})," file."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-xml",children:'<ItemGroup>\n  <Protobuf Include="Protos/greet.proto" GrpcService="Client">\n<ItemGroup>\n'})}),"\n",(0,r.jsx)(t.h2,{id:"create-the-greeter-client",children:"Create the Greeter client"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Build the client project to create the types in the ",(0,r.jsx)(t.code,{children:"GrpcGreeterClient"})," namespace."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["Update the gRPC client ",(0,r.jsx)(t.code,{children:"Program.cs"})," file."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:'var GrpcServerAddress = "https://localhost:7042"\n// the port number must match the port of hte gRPC server \nusing var channel = GrpcChannel.ForAddress(GrpcServerAddress)\nvar client = new Greeter.GreeterClient(channel);\n\nvar reply = await client.SayHelloAsync(\n  new HelloRequest { Name = "GreeterClient" });\n\nConsole.WriteLine("Greeting" + reply.message);\n'})})]})}function p(e={}){const{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>l,a:()=>s});var r=n(7294);const o={},c=r.createContext(o);function s(e){const t=r.useContext(c);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(c.Provider,{value:t},e.children)}}}]);