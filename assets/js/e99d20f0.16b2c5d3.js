"use strict";(self.webpackChunkmd_note=self.webpackChunkmd_note||[]).push([[8591],{3265:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>o,toc:()=>d});var r=n(5893),a=n(1151);const s={},c="React Redux Basic",o={id:"React/Redux/React_Redux_Basic",title:"React Redux Basic",description:"init Redux for React project",source:"@site/docs/React/Redux/React_Redux_Basic.md",sourceDirName:"React/Redux",slug:"/React/Redux/React_Redux_Basic",permalink:"/my-notes/docs/React/Redux/React_Redux_Basic",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/React/Redux/React_Redux_Basic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"React Redux Async Thunk",permalink:"/my-notes/docs/React/Redux/Async_Thunk"},next:{title:"Install Redis with Docker",permalink:"/my-notes/docs/Redis/Install_Redis_Docker"}},i={},d=[{value:"init Redux for React project",id:"init-redux-for-react-project",level:2},{value:"Redux Slice for Posts",id:"redux-slice-for-posts",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",pre:"pre",ul:"ul",...(0,a.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"react-redux-basic",children:"React Redux Basic"}),"\n",(0,r.jsx)(t.h2,{id:"init-redux-for-react-project",children:"init Redux for React project"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"install react-redux and @reduxjs/toolkit"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm install @reduxjs/toolkit react-redux\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"2",children:["\n",(0,r.jsx)(t.li,{children:"create store at src/store.js"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { configureStore } from '@reduxjs/toolkit'\n\nexport default configureStore({\n  reducer: {},\n})\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"3",children:["\n",(0,r.jsx)(t.li,{children:"Wrap the root component with Provider"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { Provider } from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"4",children:["\n",(0,r.jsx)(t.li,{children:"create slice for counter at src/features/counter/counterSlice.js"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { createSlice } from '@reduxjs/toolkit'\n\n// initial state\nconst initialState = {\n  value: 0,\n}\n\n// slice\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1\n    },\n    decrement: state => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      // action.payload is the value passed in, payload is a convention\n      state.value += action.payload\n    },\n  },\n})\n\n// export actions\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport default counterSlice.reducer\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"5",children:["\n",(0,r.jsx)(t.li,{children:"add slice to store"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from '../features/counter/counterSlice'\n\nexport default configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n})\n"})}),"\n",(0,r.jsxs)(t.ol,{start:"6",children:["\n",(0,r.jsx)(t.li,{children:"use slice in component"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"// use Selector to get state, use dispatch to dispatch action\nimport { useSelector, useDispatch } from 'react-redux'\nimport { decrement, increment } from './counterSlice'\n\nexport function Counter() {\n\n  // get state\n  const count = useSelector(state => state.counter.value)\n  // dispatch action\n  const dispatch = useDispatch()\n\n  return (\n    <div>\n      <button\n        aria-label=\"Increment value\"\n        onClick={() => dispatch(increment())}\n      >\n        +\n      </button>\n      <span>{count}</span>\n      <button\n        aria-label=\"Decrement value\"\n        onClick={() => dispatch(decrement())}\n      >\n        -\n      </button>\n    </div>\n  )\n}\n"})}),"\n",(0,r.jsx)(t.h2,{id:"redux-slice-for-posts",children:"Redux Slice for Posts"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsx)(t.li,{children:"reducer and prepare"}),"\n"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"reducer is a callback function, it takes two parameters, state and action"}),"\n",(0,r.jsx)(t.li,{children:"prepare is a callback function, it takes the payload as parameter, it is optional, it returns an object, the object will be passed to reducer as action.payload"}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { createSlice } from '@reduxjs/toolkit'\nimport { nanoid } from 'nanoid'\n\nconst initialState = {\n  posts: [],\n  status: 'idle',\n  error: null,\n}\n\nexport const postsSlice = createSlice({\n  name: 'posts',\n  initialState,\n  reducers: {\n    addPost: {\n      // addPost is an action creator, it returns an action object\n      reducer(state, action) {\n        state.posts.push(action.payload)\n      },\n      // prepare is a callback function, it returns an object\n      // prepare is used to prepare the payload, it is optional\n      prepare(title, content) {\n        return {\n          payload: {\n            id: nanoid(),\n            date: new Date().toISOString(),\n            title,\n            content,\n          },\n        }\n      },\n    },\n    postsLoading: state => {\n      state.status = 'loading'\n    },\n    postsReceived: (state, action) => {\n      state.status = 'succeeded'\n      state.posts = action.payload\n    },\n    postsFailed: (state, action) => {\n      state.status = 'failed'\n      state.error = action.payload\n    },\n  },\n})\n\n\nexport const { addPost, postsLoading, postsReceived, postsFailed } = postsSlice.actions\n\nexport default postsSlice.reducer\n"})})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>o,a:()=>c});var r=n(7294);const a={},s=r.createContext(a);function c(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);