"use strict";(self.webpackChunkmd_note=self.webpackChunkmd_note||[]).push([[2531],{2337:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var t=i(5893),s=i(1151);const l={},r="Azure pipeline for Kubernetes(Digital Ocean)",o={id:"Azure/Pipeline/Pipeline-Kubernetes",title:"Azure pipeline for Kubernetes(Digital Ocean)",description:"Introduction",source:"@site/docs/Azure/Pipeline/Pipeline-Kubernetes.md",sourceDirName:"Azure/Pipeline",slug:"/Azure/Pipeline/Pipeline-Kubernetes",permalink:"/my-notes/docs/Azure/Pipeline/Pipeline-Kubernetes",draft:!1,unlisted:!1,editUrl:"https://github.com/jishen027/my-notes/tree/main/docs/Azure/Pipeline/Pipeline-Kubernetes.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VPC",permalink:"/my-notes/docs/AWS/VPC/"},next:{title:"Create Azure Pipeline for Digital Ocean using Docker and SSH",permalink:"/my-notes/docs/Azure/Pipeline/Pipeline_Digital_Ocean"}},a={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Steps",id:"steps",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"azure-pipeline-for-kubernetesdigital-ocean",children:"Azure pipeline for Kubernetes(Digital Ocean)"}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"This document describes how to create a pipeline in Azure DevOps for deploying a Kubernetes application."}),"\n",(0,t.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Azure DevOps account"}),"\n",(0,t.jsx)(n.li,{children:"DigitalOcean account"}),"\n",(0,t.jsx)(n.li,{children:"DigitalOcean Kubernetes cluster"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Create a new pipeline in Azure DevOps."}),"\n",(0,t.jsx)(n.li,{children:"Select the repository where the application code is stored."}),"\n",(0,t.jsx)(n.li,{children:"Select the pipeline type."}),"\n",(0,t.jsx)(n.li,{children:"Configure the pipeline."}),"\n",(0,t.jsx)(n.li,{children:"Save and run the pipeline."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"code:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# Optimized Azure Pipeline Configuration for CI/CD with Docker\n\ntrigger:\n  - master\n\nresources:\n  - repo: self\n\nvariables:\n  - group: "digital-ocean-credentials"\n  - name: tag\n    value: $(Build.BuildId)\n  - name: repositoryUrl\n    value: "registry.digitalocean.com/esv-analytics"\n  - name: serviceAppImage\n    value: "service-app"\n  - name: webAppImage\n    value: "web-app"\n  - name: sshPort\n    value: "18765"\n\nstages:\n  - stage: Build\n    displayName: Build and Push Docker Images\n    jobs:\n      - job: Build\n        displayName: Build Images\n        pool:\n          vmImage: ubuntu-latest\n        steps:\n          - script: docker compose build\n            displayName: "Docker Compose Build"\n\n          - script: |\n              docker login $(repositoryUrl) -u $(token) -p $(token)\n              docker tag $(serviceAppImage):latest $(repositoryUrl)/$(serviceAppImage):$(tag)\n              docker tag $(webAppImage):latest $(repositoryUrl)/$(webAppImage):$(tag)\n              docker push $(repositoryUrl)/$(serviceAppImage):$(tag)\n              docker push $(repositoryUrl)/$(webAppImage):$(tag)\n            displayName: "Push Docker Images"\n\n  - stage: Deploy_k8s\n    displayName: Deploy to Kubernetes\n    jobs:\n      - job: Deploy\n        displayName: Deploy to Kubernetes Cluster\n        pool:\n          vmImage: ubuntu-latest\n        steps:\n          - task: DownloadSecureFile@1\n            displayName: "Download Kubernetes Configuration"\n            name: kubeConfig\n            inputs:\n              secureFile: "k8s-1-28-2-do-0-lon1-1705409907630-kubeconfig.yaml"\n\n          - script: |\n              echo "Configure kubectl"\n              mkdir -p ~/.kube\n              cp $(kubeConfig.secureFilePath) ~/.kube/config\n              chmod 600 ~/.kube/config\n            displayName: "Setup kubectl"\n\n          - script: |\n              echo "Replace Image Tags in Kubernetes Manifests"\n              sed -i \'s/\\${IMAGE_TAG}/$(tag)/g\' k8s/service-app-deployment.yml\n              sed -i \'s/\\${IMAGE_TAG}/$(tag)/g\' k8s/web-app-deployment.yml\n            displayName: "Replace Image Tags"\n\n          - script: |\n              echo "Deploying to Kubernetes Cluster"\n              kubectl apply -f k8s/service-app-deployment.yml\n              kubectl apply -f k8s/web-app-deployment.yml\n              kubectl apply -f k8s/redis-deployment.yml\n              # kubectl apply -f k8s/mongo-deployment.yml\n              # Add more kubectl apply commands for each of your Kubernetes manifest files\n            displayName: "Apply Kubernetes Manifests"\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"In this document, we have learned how to create a pipeline in Azure DevOps for deploying a Kubernetes application. This pipeline will help you automate the deployment process and ensure that your application is deployed consistently and reliably."})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>o,a:()=>r});var t=i(7294);const s={},l=t.createContext(s);function r(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);