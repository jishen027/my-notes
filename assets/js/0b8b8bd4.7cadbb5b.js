"use strict";(self.webpackChunkmd_note=self.webpackChunkmd_note||[]).push([[2457],{3971:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var t=s(5893),i=s(1151);const o={},r="Open/Close Principle",c={id:"SOLID/Open_Closed_Principle",title:"Open/Close Principle",description:"- Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.",source:"@site/docs/SOLID/Open_Closed_Principle.md",sourceDirName:"SOLID",slug:"/SOLID/Open_Closed_Principle",permalink:"/my-notes/docs/SOLID/Open_Closed_Principle",draft:!1,unlisted:!1,editUrl:"https://github.com/jishen027/my-notes/tree/main/docs/SOLID/Open_Closed_Principle.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Liskov Substitution Principle",permalink:"/my-notes/docs/SOLID/Liskov_Substitution_Principle"},next:{title:"Single Responsibility Principle",permalink:"/my-notes/docs/SOLID/Single_Responsibility_Principle"}},l={},a=[];function d(e){const n={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"openclose-principle",children:"Open/Close Principle"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification."}),"\n",(0,t.jsx)(n.li,{children:"In other words, you should be able to add new functionality to an object or method without altering it."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:'// Open/Close Principle\nclass Shape {\n  draw() {\n    throw new Error("draw method is not implemented");\n  }\n}\n\nclass Circle extends Shape {\n  constructor(radius) {\n    // call the super class constructor and pass in the name parameter\n    super();\n    this.radius = radius;\n  }\n\n  draw() {\n    console.log("draw circle");\n  }\n}\n\n// when we add a new shape, we don\'t need to modify the Shape class\nclass Square extends Shape {\n  constructor(length) {\n    // call the super class constructor and pass in the name parameter\n    super();\n    this.length = length;\n  }\n\n  draw() {\n    console.log("draw square");\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"in the above example, the Shape class is closed for modification, we can add a new shape, such as Square, without modifying the Shape class"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"the Shape class is open for extension, we can add a new shape, such as Square, by extending the Shape class"}),"\n"]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>c,a:()=>r});var t=s(7294);const i={},o=t.createContext(i);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);