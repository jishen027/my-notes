"use strict";(self.webpackChunkmd_note=self.webpackChunkmd_note||[]).push([[7593],{5299:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>t,metadata:()=>d,toc:()=>i});var a=s(5893),o=s(1151);const t={},r="Dependency Inversion Principle",d={id:"SOLID/Dependency_Inversion_Principle",title:"Dependency Inversion Principle",description:"- High-level modules should not depend on low-level modules. Both should depend on abstractions.",source:"@site/docs/SOLID/Dependency_Inversion_Principle.md",sourceDirName:"SOLID",slug:"/SOLID/Dependency_Inversion_Principle",permalink:"/my-notes/docs/SOLID/Dependency_Inversion_Principle",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/SOLID/Dependency_Inversion_Principle.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Redis Basics",permalink:"/my-notes/docs/Redis/Redis_note"},next:{title:"Interface Segregation Principle",permalink:"/my-notes/docs/SOLID/Interface_Segregation_Principle"}},c={},i=[];function l(e){const n={code:"code",h1:"h1",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"dependency-inversion-principle",children:"Dependency Inversion Principle"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"High-level modules should not depend on low-level modules. Both should depend on abstractions."}),"\n",(0,a.jsx)(n.li,{children:"Abstractions should not depend on details. Details should depend on abstractions."}),"\n",(0,a.jsx)(n.li,{children:"In other words, we should depend on abstractions, not on concretions."}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'class UserManager {\n  // constructor injection\n  constructor(database) {\n    this.database = database;\n  }\n\n  addUser(user) {\n    this.database.add(user);\n  }\n}\n\nclass MySQLDatabase {\n  add(user) {\n    console.log(`${user} added to MySQL database`);\n  }\n}\n\nclass MongoDBDatabase {\n  add(user) {\n    console.log(`${user} added to MongoDB database`);\n  }\n}\n\nconst mysql = new MySQLDatabase();\nconst mongodb = new MongoDBDatabase();\n\nconst userManager1 = new UserManager(mysql);\nconst userManager2 = new UserManager(mongodb);\n\nuserManager1.addUser("John Doe");\nuserManager2.addUser("John Doe");\n'})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"in the above example, the UserManager class is a high-level module, it should not depend on low-level modules, such as MySQLDatabase and MongoDBDatabase"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"the UserManager class should depend on abstractions, such as Database, not on concretions, such as MySQLDatabase and MongoDBDatabase"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"the MySQLDatabase and MongoDBDatabase classes are low-level modules, they should not depend on high-level modules, such as UserManager"}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// Functional Programming - Dependency Inversion Principle\ninterface Database {\n  add(user: string): void;\n}\n\nconst mysql: Database = {\n  add: (user) => {\n    console.log(`${user} added to MySQL database`);\n  },\n};\n\nconst mongodb: Database = {\n  add: (user) => {\n    console.log(`${user} added to MongoDB database`);\n  },\n};\n\nconst userManager1 = (database: Database) => {\n  const addUser = (user: string) => {\n    database.add(user);\n  };\n\n  return { addUser };\n};\n\nconst userManager2 = (database: Database) => {\n  const addUser = (user: string) => {\n    database.add(user);\n  };\n\n  return { addUser };\n};\n\nuserManager1(mysql).addUser("John Doe");\nuserManager2(mongodb).addUser("John Doe");\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,n,s)=>{s.d(n,{Z:()=>d,a:()=>r});var a=s(7294);const o={},t=a.createContext(o);function r(e){const n=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);