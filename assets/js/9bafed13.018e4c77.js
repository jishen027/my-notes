"use strict";(self.webpackChunkmd_note=self.webpackChunkmd_note||[]).push([[9565],{2658:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var i=t(5893),r=t(1151);const s={},o="Architecting Serverless Application",a={id:"AWS/Certificates/SolutionArchitecture/04ArchitectingServerlessApplication",title:"Architecting Serverless Application",description:"Migrating to Serverless",source:"@site/docs/AWS/Certificates/SolutionArchitecture/04ArchitectingServerlessApplication.md",sourceDirName:"AWS/Certificates/SolutionArchitecture",slug:"/AWS/Certificates/SolutionArchitecture/04ArchitectingServerlessApplication",permalink:"/my-notes/docs/AWS/Certificates/SolutionArchitecture/04ArchitectingServerlessApplication",draft:!1,unlisted:!1,editUrl:"https://github.com/jishen027/my-notes/tree/main/docs/AWS/Certificates/SolutionArchitecture/04ArchitectingServerlessApplication.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"03 AWS Lambda Functions",permalink:"/my-notes/docs/AWS/Certificates/SolutionArchitecture/03LambdaFunctions"},next:{title:"AWS Solution Architecture Associate Exam Prep",permalink:"/my-notes/docs/AWS/Certificates/SolutionArchitecture/ExamPrepAssociate"}},c={},l=[{value:"Migrating to Serverless",id:"migrating-to-serverless",level:2},{value:"Migration patterns",id:"migration-patterns",level:3},{value:"Infrastructure abstraction and architecture modernization",id:"infrastructure-abstraction-and-architecture-modernization",level:4},{value:"Migration considerations",id:"migration-considerations",level:3},{value:"Choosing Compute Services and Data Stores",id:"choosing-compute-services-and-data-stores",level:2}];function d(e){const n={h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",ul:"ul",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"architecting-serverless-application",children:"Architecting Serverless Application"}),"\n",(0,i.jsx)(n.h2,{id:"migrating-to-serverless",children:"Migrating to Serverless"}),"\n",(0,i.jsx)(n.p,{children:"The Key to thinking serverless is thinking in terms of patterns and applications, rather than in terms of individual functions or resources."}),"\n",(0,i.jsx)(n.h3,{id:"migration-patterns",children:"Migration patterns"}),"\n",(0,i.jsx)(n.p,{children:"While designing your application, it's critical for you to choose services and patterns that suit your workloads based on characteristics such as expected throughput, service limits, and cost."}),"\n",(0,i.jsx)(n.p,{children:"You can look at the migration in the context of the two paradigm shifts that need to be considered:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"How do you implement computing infrastructure ?"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"How do you approach application developement and deployment ?"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"infrastructure-abstraction-and-architecture-modernization",children:"Infrastructure abstraction and architecture modernization"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Capacity processes and cost models"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This reflects the three typical ways of operating your infrastructure: server based, containerized, and APIs and microservice."}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Operational and development models"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"From an operational and developement perspective, the modernization spectrum moves from the simplest move to the cloud - but manual, less flexible build nad deploy processes- to API-driven microservice-based application that allow or the greatest flexibility and agility but require a more significant rewrite of legacy applications."}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Monolithic, Server based"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Single artifact releases have more manual deployments and a single technology stack. There is minimal impact moving application to the cloud."}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsx)(n.li,{children:"Containerized"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Containerized applications provide platform ndependence, environment parity, and more straightforward deployments with limited code rewirtes."}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsx)(n.li,{children:"Event-driven microservices"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This includes continuous integration/continuous deployment(CI/CD) with polyglot technology stacks and frequent releases. Applications typically need to be rewritten."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Infrastructure abstraction",src:t(1647).Z+"",width:"754",height:"422"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Leapfrog"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"As the name suggests, with the leapfrg pattern, you bypass interim steps and go straight from an on-premises legacy architecture to a serverless cloud architecture."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Orginic"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"With the organic pattern, you move on-premises applications to the cloud in more of a lift-and-shift model."}),"\n",(0,i.jsx)(n.p,{children:"Developers experiment with Lambda in low-risk internal scenarios such as log processing or cron jobs. As you gain more experience, you might use serverless components for tasks such as data transformations and parallelization of processes."}),"\n",(0,i.jsx)(n.p,{children:"At some point in the adoption curve, you take a more strategic look at how serverless and microservices might address business goals such as market agility, developer innovation, and total cost of ownership."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Strangler"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"With the strangler pattern, an organization incrementally and systematically decomposes monolithic applications by creating APIs and building event-driven components that gradually replace components of the legacy application."}),"\n",(0,i.jsx)(n.h3,{id:"migration-considerations",children:"Migration considerations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"What does this application do and how are it's components organized ?"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"How can break up your data based on the command query responsibility segregation, or CQRS, pattern? What belongs on the control plane and what belongs on the data plane?"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"How does the application scale and what components drive the capacity you need ?"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Do you have schedule-based tasks?"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Do you have workers listening to a queue?"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Where can you refactor or enhance functionality without impacting the current implementation?"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"It's important to compare costs across three factors:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The infrastructure cost to run your workload;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The development effort to plan, architect, and provision resources on which the application will run."}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"The costs of your team's time to maintain the application once it's in production."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You also need to consider the business value of the increased speed and agility serverless gives you."}),"\n",(0,i.jsx)(n.h2,{id:"choosing-compute-services-and-data-stores",children:"Choosing Compute Services and Data Stores"}),"\n",(0,i.jsx)(n.p,{children:"Your goal should be to use the most optimized compute for each workload and use case."})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},1647:(e,n,t)=>{t.d(n,{Z:()=>i});const i=t.p+"assets/images/image-35-f68eb43926b3a278a320dc4d0d9ab451.png"},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>o});var i=t(7294);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);