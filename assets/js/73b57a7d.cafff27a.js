"use strict";(self.webpackChunkmd_note=self.webpackChunkmd_note||[]).push([[6978],{6941:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>c,toc:()=>p});var s=t(5893),i=t(1151);const r={},a=void 0,c={id:"TypeScript/TypeScript_basic",title:"TypeScript_basic",description:"TypeScript",source:"@site/docs/TypeScript/TypeScript_basic.md",sourceDirName:"TypeScript",slug:"/TypeScript/TypeScript_basic",permalink:"/my-notes/docs/TypeScript/TypeScript_basic",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/TypeScript/TypeScript_basic.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Single_Responsibility_Principle",permalink:"/my-notes/docs/SOLID/Single_Responsibility_Principle"},next:{title:"Drag_and_Drop_upload",permalink:"/my-notes/docs/Vue/Drag_and_Drop_upload"}},o={},p=[{value:"TypeScript",id:"typescript",level:2},{value:"What is TypeScript?",id:"what-is-typescript",level:3},{value:"Union Types",id:"union-types",level:3},{value:"Type Guards",id:"type-guards",level:3},{value:"Type Aliases",id:"type-aliases",level:3},{value:"Tagged Interfaces",id:"tagged-interfaces",level:3}];function l(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",pre:"pre",ul:"ul",...(0,i.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"typescript",children:"TypeScript"}),"\n",(0,s.jsx)(n.h3,{id:"what-is-typescript",children:"What is TypeScript?"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"TypeScript is a superset of JavaScript which primarily provides optional static typing, classes and interfaces."}),"\n",(0,s.jsx)(n.li,{children:"TypeScript is pure object oriented with classes, interfaces and statically typed like C# or Java."}),"\n",(0,s.jsx)(n.li,{children:"TypeScript is a typed superset of JavaScript that compiles to plain JavaScript."}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"union-types",children:"Union Types"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Union types are useful for modeling situations when values can overlap in the types they can take on."}),"\n",(0,s.jsx)(n.li,{children:"A union type describes a value that can be one of several types. We use the vertical bar (|) to separate each type, so number | string | boolean is the type of a value that can be a number, a string, or a boolean."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Union Types\nlet someId: number | string;\nsomeId = 123;\nsomeId = "abc";\n\n// Union Types and Type Aliases\ntype StringOrNumber = string | number;\nlet anotherId: StringOrNumber;\nanotherId = 123;\nanotherId = "abc";\n'})}),"\n",(0,s.jsx)(n.h3,{id:"type-guards",children:"Type Guards"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A type guard is some expression that performs a runtime check that guarantees the type in some scope."}),"\n",(0,s.jsx)(n.li,{children:"To define a type guard, we simply need to define a function whose return type is a type predicate."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Type Guards\ntype StringOrNumber = string | number;\n\nfunction logId(id: StringOrNumber) {\n  // Type Guard\n  if (typeof id === "string") {\n    console.log(`A string was passed in: ${id.toUpperCase()}`);\n  } else {\n    console.log(`A number was passed in: ${id.toFixed()}`);\n  }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"type-aliases",children:"Type Aliases"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Type aliases create a new name for a type. Type aliases are sometimes similar to interfaces, but can name primitives, unions, tuples, and any other types that you\u2019d otherwise have to write by hand."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Type Aliases\ntype Point = {\n  x: number;\n  y: number;\n};\n\n// Type Aliases and Interfaces\nfunction logPoint(p: Point) {\n  console.log(`${p.x}, ${p.y}`);\n}\n\n// logs "12, 26"\nconst point = { x: 12, y: 26 };\n\nlogPoint(point);\n'})}),"\n",(0,s.jsx)(n.h3,{id:"tagged-interfaces",children:"Tagged Interfaces"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Tagged unions are a useful pattern for modeling data that could come from a number of different places, but isn\u2019t always guaranteed to have a consistent shape."}),"\n",(0,s.jsx)(n.li,{children:"A tagged interface is an interface that has a property which is a literal type that unions all possible types that the interface can take on."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Tagged Interfaces\ninterface User {\n  id: number;\n  username: string;\n}\n\ninterface User {\n  role: "ADMIN" | "USER";\n}\n\nfunction logUser(user: User) {\n  console.log(`Received a user with id: ${user.id}`);\n}\n\n// Tagged Interfaces and Type Aliases\ntype User = {\n  id: number;\n  username: string;\n};\n\ntype User = {\n  role: "ADMIN" | "USER";\n};\n\nfunction logUser(user: User) {\n  console.log(`Received a user with id: ${user.id}`);\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>a});var s=t(7294);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);